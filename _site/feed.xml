<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Feeling around in the dark</title>
    <description>Bassist, Designer & Coder living in London</description>
    <link>http://roidriscoll.co.uk</link>
    <atom:link href="http://roidriscoll.co.uk/d2ecd0d.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>New Site</title>
        <description>&lt;p&gt;I figured it was about time I got to blogging.&lt;/p&gt;
</description>
        <pubDate>Mon, 25 May 2015 21:16:02 +0100</pubDate>
        <link>http://roidriscoll.co.uk/2015/05/25/new-site/</link>
        <guid isPermaLink="true">http://roidriscoll.co.uk/2015/05/25/new-site/</guid>
      </item>
    
      <item>
        <title>Seeing is Believing</title>
        <description>&lt;p&gt;Since embarking on my programming journey, I have to admit - I have gone a
little gem-crazy. It&amp;rsquo;s just so EASY to type &amp;lsquo;gem install the_promise_of_magic&amp;rsquo;.
I think that&amp;rsquo;s one of the more dangerous aspects of living in the command line.
When I&amp;rsquo;m considering installing something via the browser, there are a multitude
of clues to help you ascertain whether or not a binary is legit, not least how
polished their site looks.&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;There is also a kind of false sense of security that can set in when you&amp;rsquo;ve been
a Mac user for your entire adult life, and have not traditionally had much cause
to worry about virus issues etc- so to just type three words into your iTerm and
wait for your latest library to make itself comfortable in your filesystem takes
little effort. This is something I have noticed and am now very mindful of - but
I digress&amp;hellip;&lt;/p&gt;

&lt;p&gt;This post is really to draw your attention to a frankly wonderful wee gem I
found this week, called &amp;lsquo;Seeing Is Believing&amp;rsquo;, developed by &lt;a href=&quot;http://joshcheek.com/seeing_is_believing&quot;&gt;Mr Josh
Cheek&lt;/a&gt;. Based on an existing gem
called &lt;a href=&quot;https://rubygems.org/gems/rcodetools&quot;&gt;rcodetools&lt;/a&gt;, it automagically
places a comment at the end of each line of ruby code containing the evaluation.
Pretty friggin&#39; useful for a beginner. You can see a video of this little beaut
being demonstrated &lt;a href=&quot;http://vimeo.com/73866851&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So how could this be even better Roi? How about Sublime Text integration? &lt;a href=&quot;https://github.com/JoshCheek/sublime-text-2-seeing-is-believing&quot;&gt;Ding
Dong!&lt;/a&gt; (Josh
also supports Textmate 1-2 and Vim)&lt;/p&gt;

&lt;p&gt;There is one wee-tiny-little catch - if you&amp;rsquo;re new at this stuff, the
documentation is a little bit sparse (I found the whole rvm wrapper thing a bit
mysterious to say the least), so I thought I would do a quick write-up. Now bear
in mind that I work with a ruby version of 2.1.1 on a mac using rvm &lt;a href=&quot;https://rvm.io/rvm/basics&quot;&gt;Ruby
Version Manager&lt;/a&gt; so I can only tell you what worked
for me, and this is it.&lt;/p&gt;

&lt;p&gt;First one must install the gem:
&lt;code&gt;
gem install seeing_is_believing
&lt;/code&gt;
Then you need to navigate to the following folder:
&lt;code&gt;
cd ~/Library/Application\ Support/Sublime\ Text\ 2/Packages
&lt;/code&gt;
and inside of that directory, clone this repo:
&lt;code&gt;
git clone git://github.com/JoshCheek/sublime-text-2-seeing-is-believing.git
SeeingIsBelieving
&lt;/code&gt;
If this is confusing for you, I would recommend researching into how to navigate
your file system using the &lt;a href=&quot;http://learncodethehardway.org/cli/book/cli-crash-course.html&quot;&gt;command
line&lt;/a&gt; and basic
usage of &lt;a href=&quot;https://try.github.io&quot;&gt;Git&lt;/a&gt;.
Next up, you need to make a wrapper for Sublime (this is the bit that I found
confusing), and for this you need to know which version of ruby you are
currently running. On my setup, I can type &lt;code&gt;ruby -v&lt;/code&gt; and am rewarded with the
output:
&lt;code&gt;
ruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-darwin12.0]
&lt;/code&gt;
I take the section &lt;code&gt;ruby 2.1.1&lt;/code&gt; and type the following into Terminal:
&lt;code&gt;
rvm wrapper ruby-2.1.1 sublime
&lt;/code&gt;
Now, at this point you need to run the following command in terminal : &lt;code&gt;which
sublime_ruby&lt;/code&gt;, which will return a line like this:
&lt;code&gt;/Users/your-username/.rvm/bin/sublime_ruby&lt;/code&gt;
At this point, you need to open &amp;lsquo;SeeingIsBelieving/Seeing Is
Believing.sublime-settings&amp;rsquo; in Sublime Text and comment out the line
&lt;code&gt;&quot;RBENV_VERSION&quot;: &quot;2.0.0-p0&quot;&lt;/code&gt; and the MOST important part: delete
&lt;code&gt;&quot;ruby_command&quot;: &quot;~/.rbenv/shims/ruby&quot;,&lt;/code&gt; and replace with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;ruby_command&quot;: &quot;~/.rvm/bin/sublime_ruby&quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the line &lt;code&gt;&quot;~/.rvm/bin/sublime_ruby&quot;,&lt;/code&gt; matches the line you got when you
typed in &lt;code&gt;which sublime_ruby&lt;/code&gt; - remember that? ;)&lt;/p&gt;

&lt;p&gt;Restart Sublime Text, and enter some ruby code:
&lt;code&gt;ruby
10.times do |i|
  i * 2
end
&lt;/code&gt;
Now if you hit the pre-defined keyboard shortcut (⌥ + ⌘ + B on OS X) or run the
command:
&lt;code&gt;
Evaluate Ruby code with Seeing Is Believing
&lt;/code&gt;
from your command pallete (⌘ + ⇧ + P), you should see the following output:
&lt;code&gt;
10.times do |i|
  i * 2          # =&amp;gt; 0, 2, 4, 6, 8, 10, 12, 14, 16, 18
end              # =&amp;gt; 10
&lt;/code&gt;
To remove the comments, run &lt;code&gt;Remove Seeing Is Believing annotations&lt;/code&gt; or press (⌥
+ ⌘ + V on OS X). And you are back to the original.&lt;/p&gt;

&lt;p&gt;Well there you have it - instant win! I strongly suggest that you take the time
to watch Josh&amp;rsquo;s video (and browse the documention I linked to earlier) - I have
directly referenced a lot of the material for this article and I cannot
recommend this enough as a tool to get your head around what ruby is doing when
it evaluates your code.&lt;/p&gt;

&lt;p&gt;Happy coding! ^_^&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Jun 2014 10:55:07 +0100</pubDate>
        <link>http://roidriscoll.co.uk/gems/articles/tutorials/2014/06/21/seeing-is-believing/</link>
        <guid isPermaLink="true">http://roidriscoll.co.uk/gems/articles/tutorials/2014/06/21/seeing-is-believing/</guid>
      </item>
    
  </channel>
</rss>
