<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Articles, | brick by brick]]></title>
  <link href="http://roidriscoll.github.io/blog/categories/articles/atom.xml" rel="self"/>
  <link href="http://roidriscoll.github.io/"/>
  <updated>2014-06-22T21:58:54+01:00</updated>
  <id>http://roidriscoll.github.io/</id>
  <author>
    <name><![CDATA[Roi Driscoll]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Seeing Is Believing]]></title>
    <link href="http://roidriscoll.github.io/blog/2014/06/21/seeing-is-believing/"/>
    <updated>2014-06-21T10:55:07+01:00</updated>
    <id>http://roidriscoll.github.io/blog/2014/06/21/seeing-is-believing</id>
    <content type="html"><![CDATA[<p>Since embarking on my programming journey, I have to admit &ndash; I have gone a little gem-crazy. It&rsquo;s just so EASY to type &lsquo;gem install the_promise_of_magic&rsquo;. I think that&rsquo;s one of the more dangerous aspects of living in the command line. When I&rsquo;m considering installing something via the browser, there are a multitude of clues to help you ascertain whether or not a binary is legit, not least how polished their site looks.</p>

<!--more-->


<p>There is also a kind of false sense of security that can set in when you&rsquo;ve been a Mac user for your entire adult life, and have not traditionally had much cause to worry about virus issues etc- so to just type three words into your iTerm and wait for your latest library to make itself comfortable in your filesystem takes little effort. This is something I have noticed and am now very mindful of &ndash; but I digress&hellip;</p>

<p>This post is really to draw your attention to a frankly wonderful wee gem I found this week, called &lsquo;Seeing Is Believing&rsquo;, developed by <a href="http://joshcheek.com/seeing_is_believing">Mr Josh Cheek</a>. Based on an existing gem called <a href="https://rubygems.org/gems/rcodetools">rcodetools</a>, it automagically places a comment at the end of each line of ruby code containing the evaluation. Pretty friggin' useful for a beginner. You can see a video of this little beaut being demonstrated <a href="http://vimeo.com/73866851">here</a>.</p>

<p>So how could this be even better Roi? How about Sublime Text integration? <a href="https://github.com/JoshCheek/sublime-text-2-seeing-is-believing">Ding Dong!</a> (Josh also supports Textmate 1-2 and Vim)</p>

<p>There is one wee-tiny-little catch &ndash; if you&rsquo;re new at this stuff, the documentation is a little bit sparse (I found the whole rvm wrapper thing a bit mysterious to say the least), so I thought I would do a quick write-up. Now bear in mind that I work with a ruby version of 2.1.1 on a mac using rvm <a href="https://rvm.io/rvm/basics">Ruby Version Manager</a> so I can only tell you what worked for me, and this is it.</p>

<p>First one must install the gem:
<code>
gem install seeing_is_believing
</code>
Then you need to navigate to the following folder:
<code>
cd ~/Library/Application\ Support/Sublime\ Text\ 2/Packages
</code>
and inside of that directory, clone this repo:
<code>
git clone git://github.com/JoshCheek/sublime-text-2-seeing-is-believing.git SeeingIsBelieving
</code>
If this is confusing for you, I would recommend researching into how to navigate your file system using the <a href="http://learncodethehardway.org/cli/book/cli-crash-course.html">command line</a> and basic usage of <a href="https://try.github.io">Git</a>.
Next up, you need to make a wrapper for Sublime (this is the bit that I found confusing), and for this you need to know which version of ruby you are currently running. On my setup, I can type <code>ruby -v</code> and am rewarded with the output:
<code>
ruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-darwin12.0]
</code>
I take the section <code>ruby 2.1.1</code> and type the following into Terminal:
<code>
rvm wrapper ruby-2.1.1 sublime
</code>
Restart Sublime Text, and enter some ruby code:
<code>ruby
10.times do |i|
  i * 2
end
</code>
Now if you hit the pre-defined keyboard shortcut (⌥ + ⌘ + B on OS X) or run the command:
<code>
Evaluate Ruby code with Seeing Is Believing
</code>
from your command pallete (⌘ + ⇧ + P), you should see the following output:
<code>
10.times do |i|
  i * 2          # =&gt; 0, 2, 4, 6, 8, 10, 12, 14, 16, 18
end              # =&gt; 10
</code>
To remove the comments, run <code>Remove Seeing Is Believing annotations</code> or press (⌥ + ⌘ + V on OS X). And you are back to the original.</p>

<p>Well there you have it &ndash; instant win! I strongly suggest that you take the time to watch Josh&rsquo;s video (and browse the documention I linked to earlier) &ndash; I have directly referenced a lot of the material for this article and I cannot recommend this enough as a tool to get your head around what ruby is doing when it evaluates your code.</p>

<p>Happy coding! ^_^</p>
]]></content>
  </entry>
  
</feed>
